"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
"""
import os
import logging
from typing import List, Dict, Any, Optional, Tuple, Union

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import ContextTypes

from config import Config
from utils.database import Database
from utils.user_manager import UserManager
from utils.logging_utils import log_user_action
from handlers.message_handler import MessageHandler
from utils.synonyms import SynonymManager

logger = logging.getLogger(__name__)

class CallbackHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    
    def __init__(self, database: Database, user_manager: UserManager, synonym_manager: SynonymManager):
        self.db = database
        self.user_manager = user_manager
        self.synonym_manager = synonym_manager

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user = query.from_user
        try:
            await query.answer()
            if not hasattr(query, 'data') or not query.data:
                return
            data = query.data
            log_user_action(user.id, user.username, "BUTTON_CLICK", data)
            # --- –ü–û–°–¢–†–ê–ù–ò–ß–ù–´–ô –í–´–í–û–î –ú–û–î–ï–õ–ï–ô ---
            if data.startswith("models_page_"):
                parts = data.split("_")
                page = int(parts[2])
                brand_query = "_".join(parts[3:])
                handler = MessageHandler(self.db, self.user_manager, self.synonym_manager)
                matches = self.db.cars_df[self.db.cars_df['brand'].str.lower() == brand_query.lower()]
                if matches.empty:
                    matches = self.db.cars_df[self.db.cars_df['brand'].str.lower().str.contains(brand_query.lower())]
                matches = matches.sort_values(by=["model", "years"], ascending=[True, True])
                await handler.show_models_with_pagination(update, context, matches, brand_query, page, edit=True)
                return
            # --- –ü–∞—Ç—á brand_search_fixes: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ single_ ---
            if data.startswith("model_"):
                await self._handle_model_selection(query, context)
            elif data.startswith("frame_"):
                await self._handle_frame_selection(query, context)
            elif data.startswith("type_"):
                await self._handle_type_selection(query, context)
            elif data.startswith("kit_"):
                await self._handle_kit_selection(query, context)
            elif data.startswith("single_left_") or data.startswith("single_right_"):
                await self._handle_single_wiper_side_selection(query, context)
            elif data.startswith("single_"):
                await self._handle_single_wiper_selection(query, context)
            elif data == "new_search":
                await self._handle_new_search(query, context)
            elif data.startswith("back_to_frames_"):
                await self._handle_back_to_frames(query, context)
            elif data.startswith("back_to_types_"):
                await self._handle_back_to_types(query, context)
            elif data.startswith("add_favorite_"):
                await self._handle_add_favorite(query, context)
            elif data.startswith("view_favorites"):
                await self._handle_view_favorites(query, context)
            elif data.startswith("remove_favorite_"):
                await self._handle_remove_favorite(query, context)
            elif data.startswith("page_"):
                await self._handle_pagination(query, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {str(e)}")
            log_user_action(user.id, user.username, "BUTTON_ERROR", getattr(query, "data", ""), str(e))
            try:
                await query.edit_message_text(
                    text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑‚ú®"
                )
            except Exception:
                pass

    async def _handle_single_wiper_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        '''
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π —â–µ—Ç–∫–∏.
        '''
        type_id = query.data.replace("single_", "")
        store = self.user_manager.get_callback_data(type_id)
        if not store:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —â–µ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        buttons = []
        driver_size = store.get('driver_size')
        pass_size = store.get('pass_size')
        if driver_size:
            buttons.append([InlineKeyboardButton(f"‚û°Ô∏è –ü—Ä–∞–≤–∞—è ({driver_size} –º–º)", callback_data=f"single_left_{type_id}")])
        if pass_size:
            buttons.append([InlineKeyboardButton(f"‚¨ÖÔ∏è –õ–µ–≤–∞—è ({pass_size} –º–º)", callback_data=f"single_right_{type_id}")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"type_{type_id}")])
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
        car_rows = self.db.cars_df[
            (self.db.cars_df['brand'] == store.get('brand', '')) &
            (self.db.cars_df['model'] == store.get('model', '')) &
            (self.db.cars_df['years'] == store.get('years', ''))
        ]
        car_info = ""
        if not car_rows.empty:
            car_info = self.db.get_car_info(car_rows.iloc[0])
        frame = store.get('gy_frame', '')
        gy_type = store.get('gy_type', '')
        type_desc = ""
        if self.db.types_desc_df is not None:
            type_rows = self.db.types_desc_df[self.db.types_desc_df['gy_type'] == gy_type]
            if not type_rows.empty:
                desc = type_rows.iloc[0].get('description', '')
                if desc:
                    type_desc = f"\n\n<i>{desc}</i>"
        message = (
            f"{car_info}\n"
            f"<b>–í—ã–±—Ä–∞–Ω —Ç–∏–ø:</b> <i>{frame} {gy_type}</i>{type_desc}\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–π —â—ë—Ç–∫–∏:</b>"
        )
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )

    async def _handle_single_wiper_side_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        '''
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –æ–¥–Ω–æ–π —â–µ—Ç–∫–∏.
        '''
        data = query.data
        is_left = data.startswith("single_left_")
        type_id = data.replace("single_left_", "").replace("single_right_", "")
        store = self.user_manager.get_callback_data(type_id)
        if not store:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —â–µ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        frame = store.get('gy_frame', '')
        gy_type = store.get('gy_type', '')
        mount = store.get('mount', '')
        size = store.get('driver_size') if is_left else store.get('pass_size')
        side_name = "–ü—Ä–∞–≤–∞—è" if is_left else "–õ–µ–≤–∞—è"
        if not size:
            await query.message.edit_text(
                text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è {side_name.lower()} —Å—Ç–æ—Ä–æ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É."
            )
            return
        ozon_url, wb_url = self.db.get_single_wiper_links(frame, gy_type, mount, size)
        car_rows = self.db.cars_df[
            (self.db.cars_df['brand'] == store.get('brand', '')) &
            (self.db.cars_df['model'] == store.get('model', '')) &
            (self.db.cars_df['years'] == store.get('years', ''))
        ]
        car_info = ""
        if not car_rows.empty:
            car_info = self.db.get_car_info(car_rows.iloc[0])
        type_desc = ""
        if self.db.types_desc_df is not None:
            type_rows = self.db.types_desc_df[self.db.types_desc_df['gy_type'] == gy_type]
            if not type_rows.empty:
                desc = type_rows.iloc[0].get('description', '')
                if desc:
                    type_desc = f"\n\n<i>{desc}</i>"
        message = (
            f"{car_info}\n"
            f"<b>–í—ã–±—Ä–∞–Ω —Ç–∏–ø:</b> <i>{frame} {gy_type}</i>{type_desc}\n\n"
            f"<b>{side_name} —â—ë—Ç–∫–∞ ({size} –º–º)</b>\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>"
        )
        buttons = []
        if ozon_url and isinstance(ozon_url, str) and ozon_url.startswith("http"):
            buttons.append([InlineKeyboardButton("üåê –ö—É–ø–∏—Ç—å –Ω–∞ Ozon", url=ozon_url)])
        if wb_url and isinstance(wb_url, str) and wb_url.startswith("http"):
            buttons.append([InlineKeyboardButton("üü£ –ö—É–ø–∏—Ç—å –Ω–∞ Wildberries", url=wb_url)])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"single_{type_id}")])
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )



    
    async def _handle_model_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        model_id = query.data.replace("model_", "")
        store = self.user_manager.get_callback_data(model_id)
        
        if not store:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —â—ë—Ç–æ–∫.\n /start"
            )
            return
        
        car_rows = self.db.cars_df[
            (self.db.cars_df['brand'] == store.get('brand', '')) &
            (self.db.cars_df['model'] == store.get('model', '')) &
            (self.db.cars_df['years'] == store.get('years', ''))
        ]
        
        if car_rows.empty:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —â—ë—Ç–æ–∫.\n /start"
            )
            return
        
        car = car_rows.iloc[0]
        car_info = self.db.get_car_info(car)
        
        mount = car['mount']
        driver_size = int(car['driver']) if str(car['driver']).isdigit() else None
        pass_size = int(car['passanger']) if str(car['passanger']).isdigit() else None
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ—Ä–ø—É—Å–æ–≤
        available_frames = self.db.get_available_frames(mount, [driver_size, pass_size])
        
        if available_frames.empty:
            await query.message.edit_text(
                car_info + "\n‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —â—ë—Ç–æ–∫ –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ.",
                parse_mode='HTML'
            )
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ—Ä–ø—É—Å–∞
        buttons = []
        for _, rowf in available_frames.iterrows():
            frame = rowf['gy_frame']
            frame_id = self.user_manager.store_callback_data({
                "brand": car['brand'],
                "model": car['model'],
                "years": car['years'],
                "mount": mount,
                "driver_size": driver_size,
                "pass_size": pass_size,
                "gy_frame": frame
            })
            btn = InlineKeyboardButton(str(frame), callback_data=f"frame_{frame_id}")
            buttons.append([btn])
        
      
        
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
        
        await query.message.edit_text(
            car_info + "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:</b>",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )
    
    async def _handle_frame_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ—Ä–ø—É—Å–∞ —â–µ—Ç–∫–∏.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        frame_id = query.data.replace("frame_", "")
        store = self.user_manager.get_callback_data(frame_id)
        
        if not store:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        
        mount = store['mount']
        driver_size = store['driver_size']
        pass_size = store['pass_size']
        frame = store['gy_frame']
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–æ–≤ —â–µ—Ç–æ–∫
        available_types = self.db.get_available_types(frame, mount, [driver_size, pass_size])
        
        if available_types.empty:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥—ã —â–µ—Ç–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ—Ä–ø—É—Å."
            )
            return
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∏–¥ —â–µ—Ç–∫–∏, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
        if len(available_types) == 1:
            gy_type = available_types.iloc[0]['gy_type']
            type_id = self.user_manager.store_callback_data({
                **store, "gy_type": gy_type
            })
            await self._handle_type_selection_internal(query, store, gy_type, type_id, context)
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —â–µ—Ç–∫–∏
        buttons = []
        for _, rowt in available_types.iterrows():
            gy_type = rowt['gy_type']
            type_id = self.user_manager.store_callback_data({**store, "gy_type": gy_type})
            buttons.append([InlineKeyboardButton(str(gy_type), callback_data=f"type_{type_id}")])

        # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
        back_to_frames_id = self.user_manager.store_callback_data({**store})
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_frames_{back_to_frames_id}")])
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        car_rows = self.db.cars_df[
            (self.db.cars_df['brand'] == store.get('brand', '')) &
            (self.db.cars_df['model'] == store.get('model', '')) &
            (self.db.cars_df['years'] == store.get('years', ''))
        ]

        if car_rows.empty:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return

        car_info = self.db.get_car_info(car_rows.iloc[0])
        frame = store['gy_frame']

        # –§–æ—Ä–º–∏—Ä—É–µ–º message —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å!
        message = car_info + f"\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —â—ë—Ç–∫–∏:</b>"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ä–ø—É—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        img_dir = Config.WIPER_TYPES_IMG_DIR
        img_filename = f"{frame}.png"
        img_path = os.path.join(img_dir, img_filename)
        if os.path.exists(img_path):
            with open(img_path, "rb") as photo:
                await query.message.reply_photo(photo=photo)

        # –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )
    
    async def _handle_type_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∏–¥–∞ —â–µ—Ç–∫–∏.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        type_id = query.data.replace("type_", "")
        store = self.user_manager.get_callback_data(type_id)
        
        if not store:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∏–¥–µ —â–µ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        
        gy_type = store['gy_type']
        await self._handle_type_selection_internal(query, store, gy_type, type_id, context)
    
    async def _handle_type_selection_internal(self, query: Update.callback_query, store: Dict[str, Any], 
                                             gy_type: str, type_id: str, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —â–µ—Ç–∫–∏.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            store: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ callback
            gy_type: –í–∏–¥ —â–µ—Ç–∫–∏
            type_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        frame = store['gy_frame']
        mount = store['mount']
        driver_size = store['driver_size']
        pass_size = store['pass_size']
        
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç —â–µ—Ç–æ–∫
        ozon_kit_url, wb_kit_url = self.db.get_wiper_kit_links(frame, gy_type, mount, driver_size, pass_size)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞ —â–µ—Ç–æ–∫
        if ozon_kit_url or wb_kit_url:
            buttons.append([InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç —â—ë—Ç–æ–∫", callback_data=f"kit_{type_id}")])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —â–µ—Ç–æ–∫
        buttons.append([InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –æ–¥–Ω—É —â—ë—Ç–∫—É", callback_data=f"single_{type_id}")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_to_frames_id = self.user_manager.store_callback_data({
            "brand": store.get('brand', ''),
            "model": store.get('model', ''),
            "years": store.get('years', ''),
            "mount": mount,
            "driver_size": driver_size,
            "pass_size": pass_size,
            "gy_frame": frame
        })
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_frames_{back_to_frames_id}")])
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        car_rows = self.db.cars_df[
            (self.db.cars_df['brand'] == store.get('brand', '')) &
            (self.db.cars_df['model'] == store.get('model', '')) &
            (self.db.cars_df['years'] == store.get('years', ''))
        ]
        
        if car_rows.empty:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        
        car_info = self.db.get_car_info(car_rows.iloc[0])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ —â–µ—Ç–∫–∏
        type_desc = ""
        if self.db.types_desc_df is not None:
            type_rows = self.db.types_desc_df[self.db.types_desc_df['gy_type'] == gy_type]
            if not type_rows.empty:
                desc = type_rows.iloc[0].get('description', '')
                if desc:
                    type_desc = f"\n\n<i>{desc}</i>"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"{car_info}\n"
            f"<b>–í—ã–±—Ä–∞–Ω —Ç–∏–ø:</b> <i>{frame} {gy_type}</i>{type_desc}\n\n"
            f"<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</b>"
        )

        # ... –≤—Å—ë —á—Ç–æ –±—ã–ª–æ –î–û message ...
        message = (
            f"{car_info}\n"
            f"<b>–í—ã–±—Ä–∞–Ω —Ç–∏–ø:</b> <i>{frame} {gy_type}</i>{type_desc}\n\n"
            f"<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</b>"
        )

        
        img_dir = Config.WIPER_TYPES_IMG_DIR
        img_filename = f"{gy_type}.png"
        img_path = os.path.join(img_dir, img_filename)

        if os.path.exists(img_path):
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (–±–µ–∑ caption)
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=open(img_path, "rb")
            )

        # 2. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ (reply_markup)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )
    
    async def _handle_kit_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–º–ø–ª–µ–∫—Ç–∞ —â–µ—Ç–æ–∫.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        type_id = query.data.replace("kit_", "")
        store = self.user_manager.get_callback_data(type_id)
        
        if not store:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ–º–ø–ª–µ–∫—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        
        frame = store['gy_frame']
        gy_type = store['gy_type']
        mount = store['mount']
        driver_size = store['driver_size']
        pass_size = store['pass_size']
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç —â–µ—Ç–æ–∫
        ozon_kit_url, wb_kit_url = self.db.get_wiper_kit_links(frame, gy_type, mount, driver_size, pass_size)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        car_rows = self.db.cars_df[
            (self.db.cars_df['brand'] == store.get('brand', '')) &
            (self.db.cars_df['model'] == store.get('model', '')) &
            (self.db.cars_df['years'] == store.get('years', ''))
        ]
        
        car_info = ""
        if not car_rows.empty:
            car_info = self.db.get_car_info(car_rows.iloc[0])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ —â–µ—Ç–∫–∏
        type_desc = ""
        if self.db.types_desc_df is not None:
            type_rows = self.db.types_desc_df[self.db.types_desc_df['gy_type'] == gy_type]
            if not type_rows.empty:
                desc = type_rows.iloc[0].get('description', '')
                if desc:
                    type_desc = f"\n\n<i>{desc}</i>"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"{car_info}\n"
            f"<b>–í—ã–±—Ä–∞–Ω —Ç–∏–ø:</b> <i>{frame} {gy_type}</i>{type_desc}\n\n"
            f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞ —â—ë—Ç–æ–∫:</b>"
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        buttons = []
        
        if ozon_kit_url and isinstance(ozon_kit_url, str) and ozon_kit_url.startswith("http" ):
            buttons.append([InlineKeyboardButton("üåê –ö–æ–º–ø–ª–µ–∫—Ç –Ω–∞ Ozon", url=ozon_kit_url)])
        
        if wb_kit_url and isinstance(wb_kit_url, str) and wb_kit_url.startswith("http" ):
            buttons.append([InlineKeyboardButton("üü£ –ö–æ–º–ø–ª–µ–∫—Ç –Ω–∞ Wildberries", url=wb_kit_url)])
        
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"type_{type_id}")])
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])

        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )

    


    
    async def _handle_new_search(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        await query.message.edit_text(
            text="–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
        )
    
    async def _handle_back_to_frames(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–æ—Ä–ø—É—Å–∞.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        back_id = query.data.replace("back_to_frames_", "")
        store = self.user_manager.get_callback_data(back_id)
        
        if not store:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ—Ä–ø—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        car_rows = self.db.cars_df[
            (self.db.cars_df['brand'] == store.get('brand', '')) &
            (self.db.cars_df['model'] == store.get('model', '')) &
            (self.db.cars_df['years'] == store.get('years', ''))
        ]
        
        if car_rows.empty:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        
        car = car_rows.iloc[0]
        mount = car['mount']
        driver_size = int(car['driver']) if str(car['driver']).isdigit() else None
        pass_size = int(car['passanger']) if str(car['passanger']).isdigit() else None
        car_info = self.db.get_car_info(car)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ—Ä–ø—É—Å–æ–≤
        available_frames = self.db.get_available_frames(mount, [driver_size, pass_size])
        
        if available_frames.empty:
            await query.message.edit_text(
                car_info + "\n‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —â—ë—Ç–æ–∫ –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ.",
                parse_mode='HTML'
            )
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ—Ä–ø—É—Å–∞
        buttons = []
        for _, rowf in available_frames.iterrows():
            frame = rowf['gy_frame']
            frame_id = self.user_manager.store_callback_data({
                **store,
                "mount": mount,
                "driver_size": driver_size,
                "pass_size": pass_size,
                "gy_frame": frame
            })
            btn = InlineKeyboardButton(str(frame), callback_data=f"frame_{frame_id}")
            buttons.append([btn])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
        
        await query.message.edit_text(
            car_info + "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:</b>",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )
    
    async def _handle_back_to_types(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–∞ —â–µ—Ç–∫–∏.
        
        Args:
            query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        back_id = query.data.replace("back_to_types_", "")
        store = self.user_manager.get_callback_data(back_id)
        
        if not store:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–∞ —â–µ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        
        frame = store['gy_frame']
        mount = store['mount']
        driver_size = store['driver_size']
        pass_size = store['pass_size']
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–æ–≤ —â–µ—Ç–æ–∫
        available_types = self.db.get_available_types(frame, mount, [driver_size, pass_size])
        
        if available_types.empty:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∏–¥—ã —â–µ—Ç–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ—Ä–ø—É—Å."
            )
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —â–µ—Ç–∫–∏
        buttons = []
        for _, rowt in available_types.iterrows():
            gy_type = rowt['gy_type']
            type_id = self.user_manager.store_callback_data({
                **store, "gy_type": gy_type
            })
            buttons.append([InlineKeyboardButton(str(gy_type), callback_data=f"type_{type_id}")])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        back_to_frames_id = self.user_manager.store_callback_data({**store})
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_frames_{back_to_frames_id}")])
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        car_rows = self.db.cars_df[
            (self.db.cars_df['brand'] == store.get('brand', '')) &
            (self.db.cars_df['model'] == store.get('model', '')) &
            (self.db.cars_df['years'] == store.get('years', ''))
        ]
        
        if car_rows.empty:
            await query.message.edit_text(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ. /start"
            )
            return
        
        car_info = self.db.get_car_info(car_rows.iloc[0])
        
        await query.message.edit_text(
            car_info + f"\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —â—ë—Ç–∫–∏:</b>",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )
    
