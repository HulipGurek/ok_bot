"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
import os
import logging
import pandas as pd

from typing import List, Dict, Any, Optional, Tuple, Union

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import ContextTypes

from config import Config
from utils.database import Database
from utils.search import CarSearchEngine
from utils.user_manager import UserManager
from utils.synonyms import SynonymManager
from utils.logging_utils import log_user_action

logger = logging.getLogger(__name__)
MODELS_PER_PAGE = 50

class MessageHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    def __init__(self, database: Database, user_manager: UserManager, synonym_manager: SynonymManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            database: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            synonym_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        """
        self.db = database
        self.user_manager = user_manager
        self.synonym_manager = synonym_manager
        self.search_engine = CarSearchEngine(database.cars_df)

    async def show_models_with_pagination(self, update, context, matches, brand_query, page=0, edit=False):
        matches = matches.sort_values(by=["model", "years"], ascending=[True, True])
        total = len(matches)
        start = page * MODELS_PER_PAGE
        end = start + MODELS_PER_PAGE
        current_matches = matches.iloc[start:end]
        buttons = []
        for _, row in current_matches.iterrows():
            callback_id = self.user_manager.store_callback_data({
                "brand": row['brand'],
                "model": row['model'],
                "years": row['years'],
            })
            button_text = f"{row['model'].upper()} ({row['years']})"
            buttons.append([InlineKeyboardButton(button_text, callback_data=f"model_{callback_id}")])
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"models_page_{page-1}_{brand_query}"))
        if end < total:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"models_page_{page+1}_{brand_query}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
        msg_text = (
            f"üîç –ü–æ –º–∞—Ä–∫–µ <b>\"{brand_query}\"</b> –Ω–∞–π–¥–µ–Ω–æ {total} –º–æ–¥–µ–ª–µ–π:\n\n"
            f"–ü–æ–∫–∞–∑–∞–Ω–æ {start+1}-{min(end, total)} –∏–∑ {total}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:"
        )
        if edit:
            await update.callback_query.edit_message_text(
                msg_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                msg_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode='HTML'
            )

    async def handle_brand_search(self, update, context, brand_query):
        user = update.effective_user
        self.user_manager.register_user(user.id)
        log_user_action(user.id, user.username, "BRAND_SEARCH", brand_query)
        await update.message.chat.send_action("typing")
        brand_query_norm = brand_query.strip().lower()

        # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        matches = self.db.cars_df[self.db.cars_df['brand'].str.lower() == brand_query_norm]
        canonical_for_pagination = brand_query  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # 2. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if matches.empty:
            matches = self.db.cars_df[self.db.cars_df['brand'].str.lower().str.contains(brand_query_norm)]
        # 3. –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
        if matches.empty:
            synonyms = self.synonym_manager.get_synonyms()
            for canon, syns in synonyms.items():
                all_syns = [canon] + (syns if isinstance(syns, list) else [syns])
                if brand_query_norm in [s.lower() for s in all_syns]:
                    matches = self.db.cars_df[self.db.cars_df['brand'].str.lower() == canon.lower()]
                    canonical_for_pagination = canon
                    break

        # 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –æ—à–∏–±–∫–∞
        if matches.empty:
            await update.message.reply_text(
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É <b>\"{brand_query}\"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
                parse_mode='HTML'
            )
            return

        # 5. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º show_models_with_pagination!
        await self.show_models_with_pagination(update, context, matches, canonical_for_pagination, page=0)

    def _create_model_buttons_multirow(self, matches: pd.DataFrame, buttons_per_row: int = 1) -> List[List[InlineKeyboardButton]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ.
        
        Args:
            matches: DataFrame —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
            buttons_per_row: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            
        Returns:
            List[List[InlineKeyboardButton]]: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫

        """
        matches = matches.sort_values(by=["model", "years"], ascending=[True, True])
        buttons = []
        current_row = []
        seen = set()
        button_count = 0
        
        for _, row in matches.iterrows():
            key = (row['brand'], row['model'], row['years'])
            if key not in seen:
                callback_id = self.user_manager.store_callback_data({
                    "brand": row['brand'],
                    "model": row['model'],
                    "years": row['years'],
                })
                callback_data = f"model_{callback_id}"
                button_text = f"{row['model'].upper()} ({row['years']})"
                
                current_row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
                button_count += 1
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å
                if button_count % buttons_per_row == 0:
                    buttons.append(current_row)
                    current_row = []
                
                seen.add(key)
                
                if len(seen) >= Config.MAX_RESULTS:
                    break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if current_row:
            buttons.append(current_row)
        
        return buttons
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        '''
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        '''
        # --- –ü–∞—Ç—á brand_search_fixes ---
        if context.user_data.get('waiting_for_brand'):
            del context.user_data['waiting_for_brand']
            await self.handle_brand_search(update, context, update.message.text)
            return
            
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        user = update.effective_user
        self.user_manager.register_user(user.id)
        text = update.message.text.strip()
        context.user_data['user_query_message_id'] = update.message.message_id
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(user.id, user.username, "SEARCH", text)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        await update.message.chat.send_action("typing")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        synonyms = self.synonym_manager.get_synonyms()
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        def log_debug(msg: str) -> None:
            logger.info(f"SEARCH_DEBUG | User: {user.id} | Query: {text!r} | {msg}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ –º–∞—Ä–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–±–µ–∑ –º–æ–¥–µ–ª–∏)
        # –≠—Ç–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 —Å–ª–æ–≤–∞) –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä, 
        # —Ç–æ —ç—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∞
        words = text.split()
        contains_digits = any(char.isdigit() for char in text)
        
        if len(words) <= 2 and not contains_digits:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–∞—Ä–∫–µ
            brand_matches = self.db.cars_df[self.db.cars_df['brand'].str.lower() == text.lower()]
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–∞—Ä–∫–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ
            if not brand_matches.empty:
                await self.handle_brand_search(update, context, text)
                return
        
        # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –æ–±—ã—á–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        result = self.search_engine.search(text, synonyms, log_debug=log_debug)
        matches = result['matches']
        similar = result['similar']
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –Ω–æ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if matches.empty and not similar.empty:
            buttons = self._create_model_buttons(similar)
            buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
            
            await update.message.reply_text(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É <b>\"{text}\"</b> —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –º–æ–¥–µ–ª–∏:\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode='HTML'
            )
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –Ω–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if matches.empty:
            await update.message.reply_text(
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É <b>\"{text}\"</b> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"‚Ä¢ Audi ‚Ä¢ KIA ‚Ä¢ Lada\n"
                f"/start",
                parse_mode='HTML'
            )
            return
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if len(matches) == 1:
            car = matches.iloc[0]
            car_info = self.db.get_car_info(car)
            
            mount = car['mount']
            driver_size = int(car['driver']) if str(car['driver']).isdigit() else None
            pass_size = int(car['passanger']) if str(car['passanger']).isdigit() else None
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ—Ä–ø—É—Å–æ–≤
            available_frames = self.db.get_available_frames(mount, [driver_size, pass_size])
            
            if available_frames.empty:
                await update.message.reply_text(
                    car_info + "\n‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —â—ë—Ç–æ–∫ –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ.",
                    parse_mode='HTML'
                )
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ—Ä–ø—É—Å–∞
            buttons = []
            for _, rowf in available_frames.iterrows():
                frame = rowf['gy_frame']
                frame_id = self.user_manager.store_callback_data({
                    "brand": car['brand'],
                    "model": car['model'],
                    "years": car['years'],
                    "mount": mount,
                    "driver_size": driver_size,
                    "pass_size": pass_size,
                    "gy_frame": frame
                })
                btn = InlineKeyboardButton(str(frame), callback_data=f"frame_{frame_id}")
                buttons.append([btn])
            

            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
            
            await update.message.reply_text(
                car_info + "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —â—ë—Ç–∫–∏:</b>",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode='HTML'
            )
            return
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        buttons = self._create_model_buttons(matches)
        buttons.append([InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")])
        
        await update.message.reply_text(
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É <b>\"{text}\"</b> –Ω–∞–π–¥–µ–Ω–æ {len(matches)} –º–æ–¥–µ–ª–µ–π:\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )
    
    def _create_model_buttons(self, matches: pd.DataFrame) -> List[List[InlineKeyboardButton]]:
        matches = matches.sort_values(by=["model", "years"], ascending=[True, True]) 
        buttons = []
        seen = set()
        for _, row in matches.iterrows():
            key = (row['brand'], row['model'], row['years'])
            if key not in seen:
                callback_id = self.user_manager.store_callback_data({
                    "brand": row['brand'],
                    "model": row['model'],
                    "years": row['years'],
                })
                callback_data = f"model_{callback_id}"
                button_text = f"{row['model'].upper()} ({row['years']})"
                buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
                seen.add(key)
            if len(buttons) >= Config.MAX_RESULTS:
                break
        return buttons