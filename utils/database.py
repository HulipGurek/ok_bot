"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ —â–µ—Ç–æ–∫.
"""
import os
import logging
import pandas as pd
from typing import Dict, List, Optional, Tuple, Any, Set, Union
from config import Config

logger = logging.getLogger(__name__)

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ —â–µ—Ç–æ–∫."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö."""
        self.cars_df = None
        self.wipers_df = None
        self.types_desc_df = None
        self.load_all()
    
    def load_all(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Returns:
            bool: True, –µ—Å–ª–∏ –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.load_cars_database()
            self.load_wipers_catalog()
            self.load_types_desc()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False
    
    def load_cars_database(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."""
        try:
            df = pd.read_excel(Config.DATABASE_PATH, sheet_name=0, engine='openpyxl').fillna('–Ω–µ—Ç')
            if not self.validate_database(df):
                raise ValueError("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            df['brand_lower'] = df['brand'].apply(self.normalize_text)
            df['model_lower'] = df['model'].apply(self.normalize_text)
            df['full_name'] = df['brand_lower'] + ' ' + df['model_lower']
            
            self.cars_df = df
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {str(e)}")
            raise
    
    def load_wipers_catalog(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —â–µ—Ç–æ–∫."""
        try:
            wipers = pd.read_excel(Config.WIPERS_PATH, sheet_name=0, engine='openpyxl').fillna('–Ω–µ—Ç')
            wipers.columns = [col.strip() for col in wipers.columns]
            self.wipers_df = wipers
            logger.info(f"–ö–∞—Ç–∞–ª–æ–≥ —â–µ—Ç–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(wipers)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —â–µ—Ç–æ–∫: {str(e)}")
            raise
    
    def load_types_desc(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —â–µ—Ç–æ–∫."""
        try:
            df = pd.read_excel(Config.TYPES_DESC_PATH, sheet_name=0, engine='openpyxl').fillna('')
            df.columns = [col.strip() for col in df.columns]
            self.types_desc_df = df
            logger.info(f"–û–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —â–µ—Ç–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–∏—Å–∞–Ω–∏–π —Ç–∏–ø–æ–≤ —â–µ—Ç–æ–∫: {str(e)}")
            raise
    
    @staticmethod
    def validate_database(df: pd.DataFrame) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            
        Returns:
            bool: True, –µ—Å–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        """
        required_columns = ['brand', 'model', 'years', 'mount', 'driver', 'passanger']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            logger.error(f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            return False
        return True
    
    @staticmethod
    def normalize_text(s: Any) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        Args:
            s: –¢–µ–∫—Å—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        import re
        from utils.text_utils import translit_ru_to_en
        
        s = str(s).strip().lower().replace('—ë', '–µ')
        if re.search(r'[–∞-—è]', s):
            s = translit_ru_to_en(s)
        return s
    
    def get_car_info(self, row: pd.Series) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            row: –°—Ç—Ä–æ–∫–∞ DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        """
        from utils.formatting import format_wiper_info
        
        return (
            f"üöó <b>{str(row.get('brand', '')).title()} {str(row.get('model', '')).upper()}</b> <i>({row.get('years', '')})</i>\n"
            f"üîó <b>–ö—Ä–µ–ø–ª–µ–Ω–∏–µ:</b> <i>{row.get('mount', '')}</i>\n"
            f"‚û°Ô∏è <b>–ü—Ä–∞–≤–∞—è —â—ë—Ç–∫–∞:</b> <code>{format_wiper_info(row.get('driver', ''))}</code>\n"
            f"‚¨ÖÔ∏è <b>–õ–µ–≤–∞—è —â—ë—Ç–∫–∞:</b> <code>{format_wiper_info(row.get('passanger', ''))}</code>\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        )
    
    def get_available_frames(self, mount: str, sizes: List[int]) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–æ—Ä–ø—É—Å–æ–≤ —â–µ—Ç–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä–æ–≤.
        
        Args:
            mount: –¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è
            sizes: –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —â–µ—Ç–æ–∫
            
        Returns:
            pd.DataFrame: DataFrame —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ—Ä–ø—É—Å–æ–≤
        """
        if self.wipers_df is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —â–µ—Ç–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return pd.DataFrame()
        
        return self.wipers_df[
            (self.wipers_df[mount].str.lower() == "–¥–∞") &
            (self.wipers_df['size'].isin(sizes))
        ][['gy_frame', 'gy_frame_pic']].drop_duplicates()
    
    def get_available_types(self, frame: str, mount: str, sizes: List[int]) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —â–µ—Ç–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞, –∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä–æ–≤.
        
        Args:
            frame: –¢–∏–ø –∫–æ—Ä–ø—É—Å–∞
            mount: –¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è
            sizes: –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —â–µ—Ç–æ–∫
            
        Returns:
            pd.DataFrame: DataFrame —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ —â–µ—Ç–æ–∫
        """
        if self.wipers_df is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —â–µ—Ç–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return pd.DataFrame()
        
        available_types = self.wipers_df[
            (self.wipers_df['gy_frame'] == frame) &
            (self.wipers_df[mount].str.lower() == "–¥–∞") &
            (self.wipers_df['size'].isin(sizes))
        ][['gy_type', 'gy_type_pic']].drop_duplicates()
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: Premium-—â–µ—Ç–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞
        return available_types.sort_values(
            by="gy_type",
            key=lambda col: col.str.lower().str.contains("premium").map(lambda x: 0 if x else 1)
        )
    
    def get_wiper_kit_links(self, frame: str, gy_type: str, mount: str, driver_size: int, pass_size: int) -> Tuple[Optional[str], Optional[str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç —â–µ—Ç–æ–∫.
        
        Args:
            frame: –¢–∏–ø –∫–æ—Ä–ø—É—Å–∞
            gy_type: –í–∏–¥ —â–µ—Ç–∫–∏
            mount: –¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è
            driver_size: –†–∞–∑–º–µ—Ä –ø—Ä–∞–≤–æ–π —â–µ—Ç–∫–∏
            pass_size: –†–∞–∑–º–µ—Ä –ª–µ–≤–æ–π —â–µ—Ç–∫–∏
            
        Returns:
            Tuple[Optional[str], Optional[str]]: –°—Å—ã–ª–∫–∏ –Ω–∞ Ozon –∏ Wildberries
        """
        if self.wipers_df is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —â–µ—Ç–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return None, None
        
        kits = self.wipers_df[
            (self.wipers_df['gy_type'].astype(str).str.strip() == str(gy_type).strip()) &
            (self.wipers_df['gy_frame'].astype(str).str.strip() == str(frame).strip())
        ].copy()
        kits = kits[kits[mount].astype(str).str.strip().str.lower() == "–¥–∞"]
        kits = kits[kits['–ö–æ–º–ø–ª–µ–∫—Ç'].notnull() & (kits['–ö–æ–º–ø–ª–µ–∫—Ç'].astype(str).str.lower() != "–Ω–µ—Ç")]
        
        sizes = set()
        if driver_size and pass_size:
            sizes.add(f"{driver_size}/{pass_size}")
            sizes.add(f"{pass_size}/{driver_size}")
        
        kits['–ö–æ–º–ø–ª–µ–∫—Ç_norm'] = kits['–ö–æ–º–ø–ª–µ–∫—Ç'].apply(lambda s: str(s).replace(" ", "").replace("–º–º", "").strip())
        kits = kits[kits['–ö–æ–º–ø–ª–µ–∫—Ç_norm'].isin(sizes)]
        
        ozon_kit_url, wb_kit_url = None, None
        if not kits.empty:
            k_row = kits.iloc[0]
            ozon_kit_url = k_row.get('Ozon', '')
            wb_kit_url = k_row.get('Wildberries', '')
        
        return ozon_kit_url, wb_kit_url
    
    def get_single_wiper_links(self, frame: str, gy_type: str, mount: str, size: int) -> Tuple[Optional[str], Optional[str]]:
        '''
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–¥–Ω—É —â–µ—Ç–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
        '''
        if self.wipers_df is None:
            logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —â–µ—Ç–æ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return None, None
        wipers = self.wipers_df[
            (self.wipers_df['gy_frame'] == frame) &
            (self.wipers_df['gy_type'] == gy_type) &
            (self.wipers_df['size'] == size)
        ]
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞–∑–º–µ—Ä (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±10 –º–º)
        if wipers.empty and isinstance(size, (int, float)):
            size_int = int(size)
            for delta in range(1, 11):
                wipers_plus = self.wipers_df[
                    (self.wipers_df['gy_frame'] == frame) &
                    (self.wipers_df['gy_type'] == gy_type) &
                    (self.wipers_df['size'] == size_int + delta)
                ]
                wipers_minus = self.wipers_df[
                    (self.wipers_df['gy_frame'] == frame) &
                    (self.wipers_df['gy_type'] == gy_type) &
                    (self.wipers_df['size'] == size_int - delta)
                ]
                if not wipers_plus.empty:
                    wipers = wipers_plus
                    break
                elif not wipers_minus.empty:
                    wipers = wipers_minus
                    break
        if wipers.empty:
            return None, None
        ozon_url = None
        wb_url = None
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –ª—é–±–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É (ozon_url/–ûzon) –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è —Å—Ç–æ–ª–±—Ü—ã!
        for _, wiper in wipers.iterrows():
            if pd.notna(wiper.get('ozon_url')) and not ozon_url:
                ozon_url = wiper['ozon_url']
            if pd.notna(wiper.get('Ozon')) and not ozon_url:
                ozon_url = wiper['Ozon']
            if pd.notna(wiper.get('wb_url')) and not wb_url:
                wb_url = wiper['wb_url']
            if pd.notna(wiper.get('Wildberries')) and not wb_url:
                wb_url = wiper['Wildberries']
            if ozon_url and wb_url:
                break
        return ozon_url, wb_url